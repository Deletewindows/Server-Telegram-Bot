import os
import json
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.storage.memory import MemoryStorage
import random
import asyncio
from datetime import datetime, timedelta

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ (–±–µ–∑ –ø—Ä–æ–∫—Å–∏)
bot = Bot(token='8084621912:AAG0zWp3tEn4voc6IyxoevvH96eUhVtVlxw')
dp = Dispatcher(storage=MemoryStorage())
DATA_FILE = 'user_data.json'
DAILY_GAME_LIMIT = 50
BOT_USERNAME = 'GiftBox_tgbot'

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
if os.path.exists(DATA_FILE):
    with open(DATA_FILE, 'r', encoding='utf-8') as f:
        user_data = json.load(f)
else:
    user_data = {}

class User:
    def __init__(self, user_id):
        self.user_id = str(user_id)
        self.stars = 0.0
        self.last_click_time = None
        self.sponsors_checked = False
        self.referrals = []
        self.referrer = None
        self.games_played_today = 0
        self.last_game_date = None
        
    def to_dict(self):
        return {
            'stars': self.stars,
            'last_click_time': self.last_click_time.isoformat() if self.last_click_time else None,
            'sponsors_checked': self.sponsors_checked,
            'referrals': self.referrals,
            'referrer': self.referrer,
            'games_played_today': self.games_played_today,
            'last_game_date': self.last_game_date.isoformat() if self.last_game_date else None
        }
    
    @classmethod
    def from_dict(cls, user_id, data):
        user = cls(user_id)
        user.stars = data.get('stars', 0.0)
        if data.get('last_click_time'):
            user.last_click_time = datetime.fromisoformat(data['last_click_time'])
        user.sponsors_checked = data.get('sponsors_checked', False)
        user.referrals = data.get('referrals', [])
        user.referrer = data.get('referrer')
        user.games_played_today = data.get('games_played_today', 0)
        if data.get('last_game_date'):
            user.last_game_date = datetime.fromisoformat(data['last_game_date'])
        return user
    
    def reset_daily_limit_if_needed(self):
        today = datetime.now().date()
        if self.last_game_date and self.last_game_date.date() != today:
            self.games_played_today = 0
            self.last_game_date = datetime.now()
            return True
        return False

def save_data():
    data_to_save = {uid: u.to_dict() if isinstance(u, User) else u for uid, u in user_data.items()}
    with open(DATA_FILE, 'w', encoding='utf-8') as f:
        json.dump(data_to_save, f, ensure_ascii=False, indent=2)

def get_user(user_id):
    user_id = str(user_id)
    if user_id not in user_data:
        user_data[user_id] = User(user_id)
    elif isinstance(user_data[user_id], dict):
        user_data[user_id] = User.from_dict(user_id, user_data[user_id])
    return user_data[user_id]

def get_main_keyboard(user_id):
    user = get_user(user_id)
    user.reset_daily_limit_if_needed()
    
    buttons = [
        [InlineKeyboardButton(text="‚≠ê –ó–∞—Ä–∞–±–æ—Ç–∞—Ç—å (+1‚≠ê)", callback_data="earn_stars")],
        [InlineKeyboardButton(text="üéÆ –ò–≥—Ä—ã", callback_data="play_games")],
        [InlineKeyboardButton(text=f"üåü –ë–∞–ª–∞–Ω—Å: {user.stars:.2f}‚≠ê", callback_data="show_stars")],
        [InlineKeyboardButton(text="üë• –†–µ—Ñ–µ—Ä–∞–ª—ã (+3‚≠ê)", callback_data="show_referrals")],
    ]
    
    if not user.sponsors_checked:
        buttons.append([InlineKeyboardButton(text="‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–ø–æ–Ω—Å–æ—Ä–æ–≤", callback_data="check_sponsors")])
    
    buttons.extend([
        [InlineKeyboardButton(text="üì∞ –ù–æ–≤–æ—Å—Ç–∏", url="https://t.me/GiftBoxNews")],
        [InlineKeyboardButton(text="üìÑ –°–æ–≥–ª–∞—à–µ–Ω–∏–µ", url="https://t.me/useragreement_GiftBox")]
    ])
    
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def get_games_keyboard(user_id):
    user = get_user(user_id)
    user.reset_daily_limit_if_needed()
    remaining = DAILY_GAME_LIMIT - user.games_played_today
    
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=f"üé∞ –°–ª–æ—Ç—ã (10‚≠ê) | –û—Å—Ç–∞–ª–æ—Å—å: {remaining}/{DAILY_GAME_LIMIT}", callback_data="slots")],
        [InlineKeyboardButton(text=f"üéØ –î–∞—Ä—Ç—Å (15‚≠ê) | –û—Å—Ç–∞–ª–æ—Å—å: {remaining}/{DAILY_GAME_LIMIT}", callback_data="darts")],
        [InlineKeyboardButton(text=f"üé≤ –ö—É–±–∏–∫ (5‚≠ê) | –û—Å—Ç–∞–ª–æ—Å—å: {remaining}/{DAILY_GAME_LIMIT}", callback_data="dice")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]
    ])

def get_sponsors_keyboard():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="1‚É£ –°–ø–æ–Ω—Å–æ—Ä 1", url="https://t.me/starsy_zarabotox_bot?start=8318454113")],
        [InlineKeyboardButton(text="2‚É£ –°–ø–æ–Ω—Å–æ—Ä 2", url="http://t.me/StarsovEarnBot?start=ycntHR20E")],
        [InlineKeyboardButton(text="3‚É£ –°–ø–æ–Ω—Å–æ—Ä 3", url="https://t.me/GoGift_official_bot?startapp=undefined")],
        [InlineKeyboardButton(text="4‚É£ –°–ø–æ–Ω—Å–æ—Ä 4", url="https://t.me/GiftsBattle_bot?startapp=ref_Vp7GrD1ZV")],
        [InlineKeyboardButton(text="5‚É£ –°–ø–æ–Ω—Å–æ—Ä 5", url="https://t.me/GiftBoxNews")],
        [InlineKeyboardButton(text="‚úÖ –Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è", callback_data="verify_sponsors")]
    ])

def get_referral_link(user_id):
    return f"https://t.me/{BOT_USERNAME}?start=ref_{user_id}"

async def check_game_limit(user_id):
    user = get_user(user_id)
    user.reset_daily_limit_if_needed()
    if user.games_played_today >= DAILY_GAME_LIMIT:
        return False, f"‚ö†Ô∏è –õ–∏–º–∏—Ç –∏–≥—Ä –∏—Å—á–µ—Ä–ø–∞–Ω ({DAILY_GAME_LIMIT}/–¥–µ–Ω—å)"
    return True, ""

async def play_game(user_id, game_name, cost, win_table):
    user = get_user(user_id)
    ok, msg = await check_game_limit(user_id)
    if not ok: return msg
    
    if user.stars < cost:
        return f"‚ùå –ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –∑–≤—ë–∑–¥! –ù—É–∂–Ω–æ {cost}‚≠ê"
    
    user.stars -= cost
    user.games_played_today += 1
    user.last_game_date = datetime.now()
    
    result = random.choices(
        list(win_table.keys()),
        weights=[w[0] for w in win_table.values()],
        k=1
    )[0]
    
    win = random.randint(*win_table[result][1])
    user.stars += win
    
    save_data()
    return (
        f"{result}\n"
        f"üí∏ –°—Ç–∞–≤–∫–∞: {cost}‚≠ê\n"
        f"üèÜ –í—ã–∏–≥—Ä—ã—à: {win}‚≠ê\n"
        f"üåü –ë–∞–ª–∞–Ω—Å: {user.stars:.2f}‚≠ê\n"
        f"üéÆ –ò–≥—Ä —Å–µ–≥–æ–¥–Ω—è: {user.games_played_today}/{DAILY_GAME_LIMIT}"
    )

@dp.message(Command("start"))
async def start(message: types.Message):
    args = message.text.split()
    user = get_user(message.from_user.id)
    
    # –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞
    if len(args) > 1 and args[1].startswith('ref_'):
        referrer_id = args[1][4:]
        if referrer_id != user.user_id and referrer_id in user_data:
            if not user.referrer:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—â–µ –Ω–µ—Ç —Ä–µ—Ñ–µ—Ä–µ—Ä–∞
                user.referrer = referrer_id
                referrer = get_user(referrer_id)
                if user.user_id not in referrer.referrals:
                    referrer.referrals.append(user.user_id)
                    referrer.stars += 3.0
                    await bot.send_message(
                        referrer_id,
                        f"üéâ <b>–ù–æ–≤—ã–π —Ä–µ—Ñ–µ—Ä–∞–ª!</b>\n"
                        f"üë§ ID: <code>{user.user_id}</code>\n"
                        f"üí∞ –ü–æ–ª—É—á–µ–Ω–æ: <b>+3‚≠ê</b>\n"
                        f"üë• –í—Å–µ–≥–æ: <b>{len(referrer.referrals)}</b>\n\n"
                        f"üåü –í–∞—à –±–∞–ª–∞–Ω—Å: <b>{referrer.stars:.2f}‚≠ê</b>",
                        parse_mode="HTML"
                    )
                    save_data()
    
    welcome_msg = (
        f"üéÅ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {message.from_user.first_name}!</b>\n\n"
        f"üåü <b>–í–∞—à –±–∞–ª–∞–Ω—Å:</b> {user.stars:.2f}‚≠ê\n\n"
        f"üíé <i>–ó–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π—Ç–µ –∑–≤—ë–∑–¥—ã –∏ –æ–±–º–µ–Ω–∏–≤–∞–π—Ç–µ –∏—Ö –Ω–∞ –ø—Ä–∏–∑—ã!</i>"
    )
    
    await message.answer(
        welcome_msg,
        reply_markup=get_main_keyboard(user.user_id),
        parse_mode="HTML"
    )
    save_data()

@dp.callback_query(F.data == "earn_stars")
async def earn_stars(callback: types.CallbackQuery):
    user = get_user(callback.from_user.id)
    now = datetime.now()
    
    if user.last_click_time and (now - user.last_click_time) < timedelta(minutes=5):
        wait = 5 - (now - user.last_click_time).seconds // 60
        await callback.answer(f"‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ {wait} –º–∏–Ω—É—Ç", show_alert=True)
        return
    
    user.stars += 1.0
    user.last_click_time = now
    
    await callback.answer(
        f"‚≠ê +1 –∑–≤–µ–∑–¥–∞!\n"
        f"üåü –ë–∞–ª–∞–Ω—Å: {user.stars:.2f}‚≠ê\n"
        f"‚è≥ –°–ª–µ–¥—É—é—â–µ–µ —á–µ—Ä–µ–∑ 5 –º–∏–Ω",
        show_alert=True
    )
    await callback.message.edit_reply_markup(reply_markup=get_main_keyboard(user.user_id))
    save_data()

@dp.callback_query(F.data == "show_referrals")
async def show_referrals(callback: types.CallbackQuery):
    user = get_user(callback.from_user.id)
    ref_count = len(user.referrals)
    earned = ref_count * 3
    ref_link = get_referral_link(user.user_id)
    
    message_text = (
        f"üë• <b>–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞</b>\n\n"
        f"üîó <b>–í–∞—à–∞ —Å—Å—ã–ª–∫–∞:</b>\n<code>{ref_link}</code>\n\n"
        f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
        f"‚Ä¢ –ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ: <b>{ref_count} —á–µ–ª</b>\n"
        f"‚Ä¢ –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: <b>{earned}‚≠ê</b>\n\n"
        f"üí° <i>–ö–∞–∂–¥—ã–π –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã–π –¥—Ä—É–≥ –ø—Ä–∏–Ω–æ—Å–∏—Ç –≤–∞–º +3‚≠ê</i>"
    )
    
    share_button = InlineKeyboardButton(
        text="üì§ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Å—Å—ã–ª–∫–æ–π", 
        url=f"https://t.me/share/url?url={ref_link}&text=–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Å—è%20–∫%20GiftBox%20–∏%20–∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π%20–∑–≤—ë–∑–¥—ã!"
    )
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[[share_button]])
    
    await callback.message.edit_text(
        message_text,
        reply_markup=keyboard,
        parse_mode="HTML"
    )
    await callback.answer()

@dp.callback_query(F.data == "slots")
async def play_slots(callback: types.CallbackQuery):
    slots_win_table = {
        "üçíüçíüçí": [5, (40, 50)],
        "üçáüçáüçá": [10, (20, 30)],
        "üîîüîîüîî": [15, (10, 20)],
        "–ü—Ä–æ–∏–≥—Ä—ã—à": [70, (0, 0)]
    }
    result = await play_game(callback.from_user.id, "–°–ª–æ—Ç—ã", 10, slots_win_table)
    await callback.message.edit_text(result, reply_markup=get_games_keyboard(callback.from_user.id))
    await callback.answer()

@dp.callback_query(F.data == "darts")
async def play_darts(callback: types.CallbackQuery):
    darts_win_table = {
        "üéØ –í —è–±–ª–æ—á–∫–æ!": [10, (60, 75)],
        "üëç –•–æ—Ä–æ—à–∏–π –±—Ä–æ—Å–æ–∫": [25, (20, 30)],
        "üòê –ü–æ—á—Ç–∏ –ø–æ–ø–∞–ª": [30, (10, 15)],
        "üò¢ –ú–∏–º–æ": [35, (0, 0)]
    }
    result = await play_game(callback.from_user.id, "–î–∞—Ä—Ç—Å", 15, darts_win_table)
    await callback.message.edit_text(result, reply_markup=get_games_keyboard(callback.from_user.id))
    await callback.answer()

@dp.callback_query(F.data == "dice")
async def play_dice(callback: types.CallbackQuery):
    dice_win_table = {
        "üéØ –®–µ—Å—Ç—ë—Ä–∫–∞!": [15, (20, 25)],
        "üëç –ü—è—Ç—ë—Ä–∫–∞": [25, (8, 12)],
        "üòê –ß–µ—Ç–≤—ë—Ä–∫–∞": [30, (5, 8)],
        "üò¢ –ú–µ–Ω—å—à–µ 4": [30, (0, 0)]
    }
    result = await play_game(callback.from_user.id, "–ö—É–±–∏–∫", 5, dice_win_table)
    await callback.message.edit_text(result, reply_markup=get_games_keyboard(callback.from_user.id))
    await callback.answer()

@dp.callback_query(F.data == "check_sponsors")
async def check_sponsors(callback: types.CallbackQuery):
    sponsors_message = (
        "üì¢ <b>–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –≤—Å–µ—Ö —Å–ø–æ–Ω—Å–æ—Ä–æ–≤:</b>\n\n"
        "1‚É£ [–°–ø–æ–Ω—Å–æ—Ä 1](https://t.me/starsy_zarabotox_bot?start=8318454113)\n"
        "2‚É£ [–°–ø–æ–Ω—Å–æ—Ä 2](http://t.me/StarsovEarnBot?start=ycntHR20E)\n"
        "3‚É£ [–°–ø–æ–Ω—Å–æ—Ä 3](https://t.me/GoGift_official_bot?startapp=undefined)\n"
        "4‚É£ [–°–ø–æ–Ω—Å–æ—Ä 4](https://t.me/GiftsBattle_bot?startapp=ref_Vp7GrD1ZV)\n"
        "5‚É£ [–°–ø–æ–Ω—Å–æ—Ä 5](https://t.me/GiftBoxNews)\n\n"
        "<i>–ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ</i>"
    )
    await callback.message.answer(
        sponsors_message,
        reply_markup=get_sponsors_keyboard(),
        disable_web_page_preview=True,
        parse_mode="HTML"
    )
    await callback.answer()

@dp.callback_query(F.data == "verify_sponsors")
async def verify_sponsors(callback: types.CallbackQuery):
    user = get_user(callback.from_user.id)
    user.sponsors_checked = True
    await callback.message.answer(
        "‚úÖ <b>–ü—Ä–æ–≤–µ—Ä–µ–Ω–æ!</b> –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏–≥—Ä–∞—Ç—å –≤ –∏–≥—Ä—ã",
        reply_markup=get_main_keyboard(callback.from_user.id),
        parse_mode="HTML"
    )
    save_data()
    await callback.answer()

@dp.callback_query(F.data == "play_games")
async def play_games_menu(callback: types.CallbackQuery):
    user = get_user(callback.from_user.id)
    if not user.sponsors_checked:
        await callback.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–ø–æ–Ω—Å–æ—Ä–æ–≤!", show_alert=True)
        return
    
    await callback.message.edit_text(
        "üéÆ <b>–í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É:</b>",
        reply_markup=get_games_keyboard(callback.from_user.id),
        parse_mode="HTML"
    )
    await callback.answer()

@dp.callback_query(F.data == "back_to_main")
async def back_to_main(callback: types.CallbackQuery):
    await callback.message.edit_text(
        "üîô <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>",
        reply_markup=get_main_keyboard(callback.from_user.id),
        parse_mode="HTML"
    )
    await callback.answer()

@dp.callback_query(F.data == "show_stars")
async def show_stars(callback: types.CallbackQuery):
    user = get_user(callback.from_user.id)
    await callback.answer(f"üåü –í–∞—à –±–∞–ª–∞–Ω—Å: {user.stars:.2f}‚≠ê", show_alert=True)

async def main():
    try:
        print("üü¢ –ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
        await dp.start_polling(bot)
    except Exception as e:
        print(f"üî¥ –û—à–∏–±–∫–∞: {e}")
        print("\n–°–æ–≤–µ—Ç—ã –ø–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—é:")
        print("1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ")
        print("2. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –≤–µ—Ä–Ω—ã–π")
        print("3. –ï—Å–ª–∏ Telegram –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω - –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ VPN")
        print("4. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å Pydroid 3")

if __name__ == '__main__':
    try:
        asyncio.run(main())
    finally:
        save_data()